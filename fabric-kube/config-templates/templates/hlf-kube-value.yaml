# Default values for hlf-kube.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

hyperledgerVersion: 2.2.0
fabricCAVersion: 1.4.8

# see the Raft sample in the README for how to enable TLS
tlsEnabled: false

# use actual domain names like peer0.atlantis.com instead of internal service names
# this should be set to true for TLS
useActualDomains: false

# adds additional DNS entries to /etc/hosts files
# see https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/#adding-additional-entries-with-hostaliases
# this value should be provided if either tlsEnabled or useActualDomains is set to true
# see the Raft sample in the README for how to use this
hostAliases: []

# common persistence settings
persistence:
  storageClass: default

backup:
  # initiate backup procedure?
  enabled: false
restore:
  # initiate restore procedure?
  enabled: false

# common settings for CouchDB and CA ingresses
ingress:
  # all ingress subdomains will be created under this domain
  parentDomain: example.com
  annotations:
    kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod

# peer settings. applies to all peers
peer:
  logLevel: info
  # launch peer pods? setting to false is useful for collecting host aliases and fast restart afterwards
  launchPods: true
  chaincode:
    # attach chaincode's stdout to peer?
    attachStdout: true
    logging:
      level:  info
      shim:   info
  persistence:
    enabled: false
    size: 16Gi
  ingress:
    enabled: true
    annotations:
      # this should match the ingressClass when peer ingress controller is created
      kubernetes.io/ingress.class: "hlf-peer"
  externalService:
    # expose peers to outer world with LoadBalancer service type?
    enabled: false
    annotations:
  # if enabled, podAntiAffinity is used to spread the peer pods in the same organization among nodes
  # normally no need to disable this
  antiAffinity:
    enabled: true
    # is antiAffinity preferred or required?
    strict: false
  backup: 
    # take backup of peers during backup procedure?
    enabled: true
  restore: 
    # restore peers data from backup during restore procedure?
    enabled: true
  operations:
    enabled: false
    listenAddress: 0.0.0.0:9443
    servicePort: 9443
    tls:
      enabled: false
  metrics:
    enabled: false
    provider: prometheus

peerAccount:
  {{- range $i, $org := .Values.orgs }}
  {{- range $i, $peer := $org.Peers }}
  - domain: {{ $peer.Domain }}
    port:  {{ $peer.Port }}
  {{- end }} 
  {{- end }}
    
# CouchDB settings. applies to all CouchDB's
couchdb:
  version: 0.4.18
  persistence:
    enabled: false
    size: 16Gi
  ingress:
    enabled: true
  backup: 
    # take backup of CouchDB's during backup procedure?
    enabled: true
  restore: 
    # restore CouchDB's data from backup during restore procedure?
    enabled: true

# CouchDB accounts
couchdbAccount:
  {{- range $i, $org := .Values.orgs }}
  {{- range $i, $peer := $org.Peers }}
  - domain: {{ $peer.Domain }}
    userName: {{ $peer.CouchDB.username }}
    password: {{ $peer.CouchDB.password }}
    port:  {{ $peer.CouchDB.port }}
  {{- end }} 
  {{- end }}
  
# Orderer settings. applies to all Orderer pods
orderer:
  # should be greater than 1 only if kafka orderer is used
  replicas: 1
  logLevel: info
  # launch orderer pods? setting to false is useful for collecting host aliases and fast restart afterwards
  launchPods: true
  persistence:
    enabled: false
    size: 16Gi
  # when enabled, internal communication among Raft orderers are done at a different port
  # useful when you dont want to enable TLS globally (i.e for transparent load balancing)
  # has no effect if orderer type is not etcdraft
  cluster:
    enabled: false
    # raft cluster communication port. should be in synch with consenters in configtx.yaml
    port: 7059
  ingress:
    enabled: false
    annotations:
      # this should match the ingressClass when orderer ingress controller is created
      kubernetes.io/ingress.class: "hlf-orderer"
  externalService:
    # expose orderers to outer world with LoadBalancer service type?
    enabled: false
    annotations:
  # if enabled, podAntiAffinity is used to spread the orderer pods in the same organization among nodes
  # normally no need to disable this
  antiAffinity:
    enabled: true
    # is antiAffinity preferred or required?
    strict: false
  backup: 
    # take backup of orderers during backup procedure?
    enabled: true
  restore: 
    # restore orderers data from backup during restore procedure?
    enabled: true
  operations:
    enabled: false
    listenAddress: 0.0.0.0:8443
    servicePort: 8443
    tls: 
      enabled: false
  metrics:
    enabled: false
    provider: prometheus    

# CA (Certificate Authority) settings. applies to all CA's
ca:
  ingress:
    enabled: false

# CA Accounts
caAccount:
{{- range $i, $org := .Values.orgs }}
  - organization: {{ $org.Name }}
    userName: {{ $org.CA.username }}
    password: {{ $org.CA.password }}
    port: {{ $org.CA.port }}
    logLevel: info
{{- end }}

# chaincode settings
chaincode:
  # fill in this array with chaincode names to limit the chaincode ConfigMap only to these ones
  include: []

      

